<div class="container mt-5">
  <% if @genre.errors.any? %>
    <div class="alert alert-danger" role="alert">
      <ul class="m-0">
        <% @genre.errors.full_messages.each do |message| %>
          <li><%= message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>
  <div class="row">
    <div class="col-md-12">
      <div class="card mb-4 shadow-sm">
        <div class="card-body">
          <div class="row">
            <!--会員情報-->
            <%= render 'public/customers/customer_section', customer: current_customer %>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="container">
    <!--魚種登録フォーム-->
    <div class="row justify-content-center">
      <div class="col-md-12">
        <div class="card mb-3">
          <!--カードヘッダー-->
          <div class="card-header d-flex justify-content-center" style="background-color: #AFDFE4;">
            <h2>魚種登録</h2>
          </div>
          <!--カードボディ-->
          <div class="card-body">
            <%= form_with model: @genre, local: true, class: 'form-inline justify-content-center' do |form| %>
              <div class="form-group mr-2">
                <%= form.label :name, "魚種", class: 'mr-2' %>
                <%= form.text_field :name, class: 'form-control' %>
              </div>
              <%= form.submit "登録", class: 'btn btn-primary' %>
            <% end %>
          </div>
        </div>
      </div>
    </div>

    <!--魚種一覧のグリッド表示-->
    <% if @genres.any? %>
    <div class="row">
      <% @genres.each_with_index do |genre, index| %>
        <div class="col-md-3 col-sm-6 mt-3 mb-3">
          <div class="card mb-4 shadow" style="background-color: white; height: 100%;">
            <!--カードボディ-->
            <div class="card-body text-center d-flex flex-column justify-content-around" style="background-color: white;">
              <!--魚の名前は10文字まで表示-->
              <h4 class="my-4"><%= truncate(genre.name, length: 10) %></h4>
              <!--編集・削除ボタン-->
              <div class="mt-0 d-flex justify-content-between">
                <% if genre.customer == current_customer %>
                  <%= link_to '編集', edit_genre_path(genre), class: 'btn btn-success btn-sm', data: { toggle: 'modal', target: '#genreModal' + genre.id.to_s } %>
                  <%= link_to '削除', genre, method: :delete, data: { confirm: '本当に削除しますか？' }, class: 'btn btn-danger btn-sm' %>
                <% end %>
              </div>
            </div>
          </div>
        </div>
      <% end %>
    </div>
    <% else %>
      <p class="text-center">魚種が登録されていません</p>
    <% end %>

    <div class="row">
      <div class="col-12 d-flex justify-content-center mt-4">
        <%= paginate @genres %>
      </div>
    </div>
  </div>
</div>

<!--魚種編集モーダル-->
<% @genres.each do |genre| %>
  <div class="modal fade" id="genreModal<%= genre.id %>" tabindex="-1" role="dialog" aria-labelledby="genreModalLabel<%= genre.id %>" aria-hidden="true">
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <!--カードヘッダー-->
        <div class="modal-header" style="background-color: #AFDFE4">
          <h5 class="modal-title" id="genreModalLabel<%= genre.id %>">魚種の編集</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <!--カードボディ-->
        <div class="modal-body" style="background-color: #f0f9fa;">
          <%= form_with model: genre, local: true do |form| %>
            <div class="form-group mb-0">
              <%= form.text_field :name, class: 'form-control' %>
              <div class="d-flex justify-content-center mt-3">
                <%= form.submit "更新", class: 'btn btn-success' %>
              </div>
            </div>
          <% end %>
        </div>
      </div>
    </div>
  </div>
<% end %>


<!--勉強メモ
form_withヘルパーとブロック変数
「form_with」 ヘルパーはRailsでフォームを生成する際に使用する。
このメソッドは、フォームビルダーオブジェクト（フォームを効率的に構築するためのツールキット）をブロック変数（例: |form|）として提供する。
フォームビルダーオブジェクトを利用することで、フォームの各フィールド（テキストフィールド、チェックボックス、送信ボタン等）を簡単に生成でき、
モデルの属性とフォームフィールドを直接関連付けることで、コードの記述が簡潔になり、フォームからのデータ送信やエラーメッセージの表示などの実装が容易に。

このブロック変数は、form_withヘルパーによって生成されるフォームビルダーオブジェクトを参照し、
このオブジェクトを使ってフォームの各種フィールドを定義します。ブロック変数の名前（例: |form|, |f|）は任意だが、
形式や意図が明確に理解できる名前を選ぶことが推奨される。仮にブロック変数を｜fish｜にした場合、「fish.submit」となる。



<#% @genres.each_with_index do |genre, index| %>のメモ
グリッド表示で各カードにジャンル名などの情報を単純に表示するだけの場合、eachメソッドだけで充分で、indexまで必要ない
インデックス（index）は、カードの配列に番号を付けたり、奇数番目と偶数番目のカードで異なるスタイルを適用したりする（順序や位置に基づく特定の処理が必要な）場合に使用するから
例えば、カードに1から始まる番号を表示したい、または奇数番目のカードの背景色を変えたい場合には、each_with_indexを使用する。
今回はindexは必要ないが、勉強としてコードは変更しない。



60行目の「to_s」メソッドのメモ:
「to_s」メソッドはオブジェクトを文字列に変換します。HTMLの属性値として数値IDを使用する場合に、数値を文字列に明示的に変換するためによく使用される。
例えば、`<div id="item<%#= item.id.to_s %>">`のように使用して、HTMLのid属性に数値を含める場合に役立つ。
しかし、Railsでは多くの場合、自動的に数値を文字列に変換してくれるため、`to_s`を省略しても問題なく動作することが多い。
明示的に`to_s`を使用することで、コードの意図がより明確になり、特にJavaScriptなど他のコンテキストと組み合わせる場合に型変換による問題を避けることができる。
「to_s」メソッドの使用は必須ではありませんが、意図を明確にし、予期せぬエラーを避けるために推奨される。

今回の場合、「to_s」はオブジェクトを文字列に変換するメソッドで、任意のジャンルに対応するモーダルウィンドウの正確な識別と表示を目的に記述。
-->
