<div class="container mt-5">
  <div class="row justify-content-center">
    <div class="col-md-6">
      <div class="form-container">
        <h2 class="text-center mb-4">ログイン</h2>
        <%= form_for(resource, as: resource_name, url: session_path(resource_name), html: { id: 'login-form', class: 'needs-validation', novalidate: true }) do |f| %>

          <div class="form-group mb-3">
            <%= f.label :email, I18n.t('devise.sessions.new.email'), class: 'form-label' %>
            <%= f.email_field :email, autofocus: true, autocomplete: "email", class: 'form-control', required: true %>
            <div class="invalid-feedback">入力してください</div>
          </div>

          <div class="form-group mb-3">
            <%= f.label :password, I18n.t('devise.sessions.new.password'), class: 'form-label' %>
            <%= f.password_field :password, autocomplete: "current-password", class: 'form-control', required: true %>
            <div class="invalid-feedback">入力してください</div>
          </div>

          <% if devise_mapping.rememberable? %>
            <div class="form-group form-check mb-3">
              <%= f.check_box :remember_me, class: 'form-check-input', id: 'invalidCheck' %>
              <%= f.label :remember_me, I18n.t('devise.sessions.new.remember_me'), class: 'form-check-label' %>
            </div>
          <% end %>

          <div class="form-group">
            <%= f.submit I18n.t('devise.sessions.new.sign_in'), class: 'btn btn-primary w-100', disabled: true %>
          </div>
        <% end %>
      </div>
    </div>
  </div>
</div>



<script>
document.addEventListener("DOMContentLoaded", function() {
  const loginForm = document.getElementById('login-form');
  const submitButton = loginForm.querySelector('input[type="submit"]');
  const inputs = loginForm.querySelectorAll('input');

  function validateInput(input) {
    if (input.validity.valid) {
      input.classList.add('is-valid');
      input.classList.remove('is-invalid');
    } else {
      input.classList.add('is-invalid');
      input.classList.remove('is-valid');
    }
  }

  function updateSubmitButtonState() {
    const allValid = Array.from(inputs).every(input => input.validity.valid);
    submitButton.disabled = !allValid;
  }

  inputs.forEach(input => {
    input.addEventListener('input', () => {
      validateInput(input);
      updateSubmitButtonState();
    });
  });

  // 初期状態で送信ボタンの状態を更新
  updateSubmitButtonState();
});
</script>
